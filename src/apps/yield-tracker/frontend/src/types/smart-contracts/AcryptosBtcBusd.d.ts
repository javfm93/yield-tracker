/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AcryptosBtcBusdInterface extends ethers.utils.Interface {
  functions: {
    "REWARD_DENOMINATOR()": FunctionFragment;
    "addAdditionalRewards(address,uint256)": FunctionFragment;
    "additionalRewards(uint256)": FunctionFragment;
    "boostFactor()": FunctionFragment;
    "boostToken()": FunctionFragment;
    "calculateWeight(address,address)": FunctionFragment;
    "deleteAdditionalRewards()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "harvest(address)": FunctionFragment;
    "harvestFee()": FunctionFragment;
    "harvestFeeAddress()": FunctionFragment;
    "initialize()": FunctionFragment;
    "maxBoost()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingSushi(address,address)": FunctionFragment;
    "poolInfo(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set(address,uint256)": FunctionFragment;
    "setBoostFactor(uint256)": FunctionFragment;
    "setHarvestFee(uint256)": FunctionFragment;
    "setHarvestFeeAddress(address)": FunctionFragment;
    "setMaxBoost(uint256)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "setSushiPerBlock(uint256)": FunctionFragment;
    "strategist()": FunctionFragment;
    "sushi()": FunctionFragment;
    "sushiPerBlock()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool(address)": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "REWARD_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdditionalRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "additionalRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boostFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "boostToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWeight",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAdditionalRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values: [string]): string;
  encodeFunctionData(
    functionFragment: "harvestFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxBoost", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingSushi",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBoostFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHarvestFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHarvestFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBoost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSushiPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sushi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sushiPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updatePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "REWARD_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAdditionalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "additionalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boostFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boostToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdditionalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvestFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxBoost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingSushi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBoostFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSushiPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sushi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sushiPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class AcryptosBtcBusd extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AcryptosBtcBusdInterface;

  functions: {
    REWARD_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "REWARD_DENOMINATOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAdditionalRewards(
      _to: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addAdditionalRewards(address,uint256)"(
      _to: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    additionalRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { to: string; reward: BigNumber }>;

    "additionalRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { to: string; reward: BigNumber }>;

    boostFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "boostFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    boostToken(overrides?: CallOverrides): Promise<[string]>;

    "boostToken()"(overrides?: CallOverrides): Promise<[string]>;

    calculateWeight(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateWeight(address,address)"(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deleteAdditionalRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deleteAdditionalRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(address,uint256)"(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvest(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest(address)"(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "harvestFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    "harvestFeeAddress()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxBoost(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxBoost()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingSushi(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingSushi(address,address)"(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalWeight: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accSushiPerShare: BigNumber;
      }
    >;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalWeight: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accSushiPerShare: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set(address,uint256)"(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBoostFactor(
      _boostFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBoostFactor(uint256)"(
      _boostFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHarvestFee(
      _harvestFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setHarvestFee(uint256)"(
      _harvestFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHarvestFeeAddress(
      _harvestFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setHarvestFeeAddress(address)"(
      _harvestFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxBoost(
      _maxBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxBoost(uint256)"(
      _maxBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSushiPerBlock(
      _sushiPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSushiPerBlock(uint256)"(
      _sushiPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    "strategist()"(overrides?: CallOverrides): Promise<[string]>;

    sushi(overrides?: CallOverrides): Promise<[string]>;

    "sushi()"(overrides?: CallOverrides): Promise<[string]>;

    sushiPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "sushiPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updatePool(address)"(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        weight: BigNumber;
        rewardDebt: BigNumber;
        rewardCredit: BigNumber;
      }
    >;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        weight: BigNumber;
        rewardDebt: BigNumber;
        rewardCredit: BigNumber;
      }
    >;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  REWARD_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "REWARD_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  addAdditionalRewards(
    _to: string,
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addAdditionalRewards(address,uint256)"(
    _to: string,
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  additionalRewards(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { to: string; reward: BigNumber }>;

  "additionalRewards(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { to: string; reward: BigNumber }>;

  boostFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "boostFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  boostToken(overrides?: CallOverrides): Promise<string>;

  "boostToken()"(overrides?: CallOverrides): Promise<string>;

  calculateWeight(
    _lpToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateWeight(address,address)"(
    _lpToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deleteAdditionalRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deleteAdditionalRewards()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _lpToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(address,uint256)"(
    _lpToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvest(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest(address)"(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestFee(overrides?: CallOverrides): Promise<BigNumber>;

  "harvestFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  harvestFeeAddress(overrides?: CallOverrides): Promise<string>;

  "harvestFeeAddress()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxBoost(overrides?: CallOverrides): Promise<BigNumber>;

  "maxBoost()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingSushi(
    _lpToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingSushi(address,address)"(
    _lpToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalWeight: BigNumber;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accSushiPerShare: BigNumber;
    }
  >;

  "poolInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalWeight: BigNumber;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accSushiPerShare: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set(
    _lpToken: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set(address,uint256)"(
    _lpToken: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBoostFactor(
    _boostFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBoostFactor(uint256)"(
    _boostFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHarvestFee(
    _harvestFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setHarvestFee(uint256)"(
    _harvestFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHarvestFeeAddress(
    _harvestFeeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setHarvestFeeAddress(address)"(
    _harvestFeeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxBoost(
    _maxBoost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxBoost(uint256)"(
    _maxBoost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStrategist(address)"(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSushiPerBlock(
    _sushiPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSushiPerBlock(uint256)"(
    _sushiPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategist(overrides?: CallOverrides): Promise<string>;

  "strategist()"(overrides?: CallOverrides): Promise<string>;

  sushi(overrides?: CallOverrides): Promise<string>;

  "sushi()"(overrides?: CallOverrides): Promise<string>;

  sushiPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "sushiPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updatePool(address)"(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      weight: BigNumber;
      rewardDebt: BigNumber;
      rewardCredit: BigNumber;
    }
  >;

  "userInfo(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      weight: BigNumber;
      rewardDebt: BigNumber;
      rewardCredit: BigNumber;
    }
  >;

  withdraw(
    _lpToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    _lpToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    REWARD_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "REWARD_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAdditionalRewards(
      _to: string,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAdditionalRewards(address,uint256)"(
      _to: string,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    additionalRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { to: string; reward: BigNumber }>;

    "additionalRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { to: string; reward: BigNumber }>;

    boostFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "boostFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    boostToken(overrides?: CallOverrides): Promise<string>;

    "boostToken()"(overrides?: CallOverrides): Promise<string>;

    calculateWeight(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateWeight(address,address)"(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteAdditionalRewards(overrides?: CallOverrides): Promise<void>;

    "deleteAdditionalRewards()"(overrides?: CallOverrides): Promise<void>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256)"(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    harvest(_lpToken: string, overrides?: CallOverrides): Promise<void>;

    "harvest(address)"(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    harvestFee(overrides?: CallOverrides): Promise<BigNumber>;

    "harvestFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFeeAddress(overrides?: CallOverrides): Promise<string>;

    "harvestFeeAddress()"(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    maxBoost(overrides?: CallOverrides): Promise<BigNumber>;

    "maxBoost()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingSushi(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingSushi(address,address)"(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalWeight: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accSushiPerShare: BigNumber;
      }
    >;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalWeight: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accSushiPerShare: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    set(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(address,uint256)"(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBoostFactor(
      _boostFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBoostFactor(uint256)"(
      _boostFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHarvestFee(
      _harvestFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setHarvestFee(uint256)"(
      _harvestFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHarvestFeeAddress(
      _harvestFeeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setHarvestFeeAddress(address)"(
      _harvestFeeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBoost(
      _maxBoost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxBoost(uint256)"(
      _maxBoost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSushiPerBlock(
      _sushiPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSushiPerBlock(uint256)"(
      _sushiPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategist(overrides?: CallOverrides): Promise<string>;

    "strategist()"(overrides?: CallOverrides): Promise<string>;

    sushi(overrides?: CallOverrides): Promise<string>;

    "sushi()"(overrides?: CallOverrides): Promise<string>;

    sushiPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "sushiPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_lpToken: string, overrides?: CallOverrides): Promise<void>;

    "updatePool(address)"(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        weight: BigNumber;
        rewardDebt: BigNumber;
        rewardCredit: BigNumber;
      }
    >;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        weight: BigNumber;
        rewardDebt: BigNumber;
        rewardCredit: BigNumber;
      }
    >;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user: string | null,
      lpToken: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; lpToken: string; amount: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Withdraw(
      user: string | null,
      lpToken: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; lpToken: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    REWARD_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "REWARD_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAdditionalRewards(
      _to: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addAdditionalRewards(address,uint256)"(
      _to: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    additionalRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "additionalRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boostFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "boostFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    boostToken(overrides?: CallOverrides): Promise<BigNumber>;

    "boostToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateWeight(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateWeight(address,address)"(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteAdditionalRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deleteAdditionalRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvest(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest(address)"(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestFee(overrides?: CallOverrides): Promise<BigNumber>;

    "harvestFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "harvestFeeAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxBoost(overrides?: CallOverrides): Promise<BigNumber>;

    "maxBoost()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingSushi(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingSushi(address,address)"(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set(address,uint256)"(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBoostFactor(
      _boostFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBoostFactor(uint256)"(
      _boostFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHarvestFee(
      _harvestFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setHarvestFee(uint256)"(
      _harvestFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHarvestFeeAddress(
      _harvestFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setHarvestFeeAddress(address)"(
      _harvestFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxBoost(
      _maxBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxBoost(uint256)"(
      _maxBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSushiPerBlock(
      _sushiPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSushiPerBlock(uint256)"(
      _sushiPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    "strategist()"(overrides?: CallOverrides): Promise<BigNumber>;

    sushi(overrides?: CallOverrides): Promise<BigNumber>;

    "sushi()"(overrides?: CallOverrides): Promise<BigNumber>;

    sushiPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "sushiPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updatePool(address)"(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REWARD_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "REWARD_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdditionalRewards(
      _to: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addAdditionalRewards(address,uint256)"(
      _to: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    additionalRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "additionalRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boostFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "boostFactor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "boostToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateWeight(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateWeight(address,address)"(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteAdditionalRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deleteAdditionalRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256)"(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvest(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest(address)"(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "harvestFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "harvestFeeAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxBoost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxBoost()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingSushi(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingSushi(address,address)"(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set(address,uint256)"(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBoostFactor(
      _boostFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBoostFactor(uint256)"(
      _boostFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHarvestFee(
      _harvestFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setHarvestFee(uint256)"(
      _harvestFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHarvestFeeAddress(
      _harvestFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setHarvestFeeAddress(address)"(
      _harvestFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBoost(
      _maxBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxBoost(uint256)"(
      _maxBoost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSushiPerBlock(
      _sushiPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSushiPerBlock(uint256)"(
      _sushiPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategist()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sushi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sushi()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sushiPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sushiPerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updatePool(address)"(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
